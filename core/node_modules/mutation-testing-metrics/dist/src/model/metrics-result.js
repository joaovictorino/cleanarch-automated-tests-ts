"use strict";
var __classPrivateFieldGet = (this && this.__classPrivateFieldGet) || function (receiver, state, kind, f) {
    if (kind === "a" && !f) throw new TypeError("Private accessor was defined without a getter");
    if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError("Cannot read private member from an object whose class did not declare it");
    return kind === "m" ? f : kind === "a" ? f.call(receiver) : f ? f.value : state.get(receiver);
};
var _MetricsResult_instances, _MetricsResult_getFileModelsRecursively;
Object.defineProperty(exports, "__esModule", { value: true });
exports.MetricsResult = void 0;
const calculateMetrics_1 = require("../calculateMetrics");
/**
 * A metrics result of T for a directory or file
 * @type {TFile} Either a file under test, or a test file
 * @type {TMetrics} Either test file metrics or file under test metrics
 */
class MetricsResult {
    constructor(name, childResults, metrics, file) {
        _MetricsResult_instances.add(this);
        this.name = name;
        this.childResults = childResults;
        this.metrics = metrics;
        this.file = file;
    }
    updateParent(value) {
        this.parent = value;
        this.childResults.forEach((result) => result.updateParent(this));
    }
    updateAllMetrics() {
        if (this.parent !== undefined) {
            this.parent.updateAllMetrics();
            return;
        }
        this.updateMetrics();
    }
    updateMetrics() {
        if (this.file === undefined) {
            this.childResults.forEach((childResult) => {
                childResult.updateMetrics();
            });
            const files = __classPrivateFieldGet(this, _MetricsResult_instances, "m", _MetricsResult_getFileModelsRecursively).call(this, this.childResults);
            if (files.length === 0) {
                return;
            }
            if (files[0].tests) {
                this.metrics = (0, calculateMetrics_1.countTestFileMetrics)(files);
            }
            else {
                this.metrics = (0, calculateMetrics_1.countFileMetrics)(files);
            }
            return;
        }
        if (this.file.tests) {
            this.metrics = (0, calculateMetrics_1.countTestFileMetrics)([this.file]);
        }
        else {
            this.metrics = (0, calculateMetrics_1.countFileMetrics)([this.file]);
        }
    }
}
exports.MetricsResult = MetricsResult;
_MetricsResult_instances = new WeakSet(), _MetricsResult_getFileModelsRecursively = function _MetricsResult_getFileModelsRecursively(childResults) {
    const flattenedFiles = [];
    if (childResults.length === 0) {
        return flattenedFiles;
    }
    childResults.forEach((child) => {
        if (child.file) {
            flattenedFiles.push(child.file);
            return;
        }
        flattenedFiles.push(...__classPrivateFieldGet(this, _MetricsResult_instances, "m", _MetricsResult_getFileModelsRecursively).call(this, child.childResults));
    });
    return flattenedFiles;
};
//# sourceMappingURL=metrics-result.js.map