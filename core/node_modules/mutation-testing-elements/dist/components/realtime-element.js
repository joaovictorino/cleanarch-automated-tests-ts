var __classPrivateFieldGet = (this && this.__classPrivateFieldGet) || function (receiver, state, kind, f) {
    if (kind === "a" && !f) throw new TypeError("Private accessor was defined without a getter");
    if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError("Cannot read private member from an object whose class did not declare it");
    return kind === "m" ? f : kind === "a" ? f.call(receiver) : f ? f.value : state.get(receiver);
};
var _RealtimeElement_subscription;
import { LitElement } from 'lit';
import { Subscription } from 'rxjs';
import { mutantChanges } from '../lib/mutant-changes';
export class RealtimeElement extends LitElement {
    constructor() {
        super(...arguments);
        _RealtimeElement_subscription.set(this, new Subscription());
    }
    shouldReactivate() {
        return true;
    }
    reactivate() {
        this.requestUpdate();
    }
    connectedCallback() {
        super.connectedCallback();
        __classPrivateFieldGet(this, _RealtimeElement_subscription, "f").add(mutantChanges.subscribe(() => this.shouldReactivate() && this.reactivate()));
    }
    disconnectedCallback() {
        super.disconnectedCallback();
        __classPrivateFieldGet(this, _RealtimeElement_subscription, "f").unsubscribe();
    }
}
_RealtimeElement_subscription = new WeakMap();
//# sourceMappingURL=realtime-element.js.map